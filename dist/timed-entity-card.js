class TimedEntityCard extends HTMLElement{setConfig(e){if(!e.entity)throw new Error("Die `entity`-Eigenschaft muss definiert sein.");this.config=e}connectedCallback(){this.innerHTML=`\n            <ha-card>\n                <h1>${this.config.title||"Zeitgesteuerte Entit√§t"}</h1>\n                <div>\n                    ${this._renderTimerOptions()}\n                    <button id="start">Start</button>\n                </div>\n            </ha-card>\n        `,this._addEventListeners()}_renderTimerOptions(){const e=this.config.show_options?.includes("countdown"),t=this.config.show_options?.includes("digital_clock"),i=this.config.show_options?.includes("analog_clock");return`\n            ${e?'<div><label for="countdown">Countdown (hh:mm:ss):</label><input type="text" id="countdown" placeholder="00:10:00"></div>':""}\n            ${t?'<div><label for="digital_time">Digitaluhr (hh:mm):</label><input type="time" id="digital_time"></div>':""}\n            ${i?'<div><label for="analog_time">Analoguhr (hh:mm):</label><input type="time" id="analog_time"></div>\n                  <div style="text-align: center; margin-top: 10px;">\n                    <svg width="100" height="100" id="analog-clock">\n                      <circle cx="50" cy="50" r="48" stroke="black" stroke-width="2" fill="white"/>\n                      <line id="hour-hand" x1="50" y1="50" x2="50" y2="20" stroke="black" stroke-width="4" />\n                      <line id="minute-hand" x1="50" y1="50" x2="50" y2="10" stroke="black" stroke-width="2" />\n                    </svg>\n                  </div>':""}\n        `}_addEventListeners(){this.querySelector("#start").addEventListener("click",()=>{const e=this.querySelector("#countdown")?.value||null,t=this.querySelector("#digital_time")?.value||null,i=this.querySelector("#analog_time")?.value||null,s=this.config.additional_entities||[],o=this.config.action||"toggle";this._callService(e,t,i,s,o)}),this.config.show_options?.includes("analog_clock")&&this.querySelector("#analog_time").addEventListener("input",e=>{const t=e.target.value.split(":"),i=parseInt(t[0],10),s=parseInt(t[1],10);this._updateAnalogClock(i,s)})}_updateAnalogClock(e,t){const i=e%12*30+t/60*30,s=6*t,o=this.querySelector("#hour-hand"),n=this.querySelector("#minute-hand");o.setAttribute("transform",`rotate(${i}, 50, 50)`),n.setAttribute("transform",`rotate(${s}, 50, 50)`)}_callService(e,t,i,s,o){const n=e?this._parseTimeToSeconds(e):null,l=t||i||null;this.hass.callService("timed_entity","start_timer",{entity_id:this.config.entity,duration:n,target_time:l,additional_entities:s,action:o})}_parseTimeToSeconds(e){const[t,i,s]=e.split(":").map(Number);return 3600*t+60*i+(s||0)}set hass(e){this._hass=e}static getConfigElement(){return document.createElement("timed-entity-card-editor")}static getStubConfig(){return{entity:"light.example_light",show_options:["countdown","digital_clock","analog_clock"]}}}customElements.define("timed-entity-card",TimedEntityCard);
